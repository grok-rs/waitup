name: Documentation

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Check docs daily at 3 AM UTC
    - cron: "0 3 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build and test documentation
  docs-build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build documentation
        run: |
          cargo doc --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings --cfg docsrs"

      - name: Test documentation examples
        run: cargo test --doc --all-features

      - name: Check for broken intra-doc links
        run: |
          cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D rustdoc::broken-intra-doc-links"

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc/
          retention-days: 30

  # Check README and other markdown files
  markdown-check:
    name: Markdown Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "18"

      - name: Install markdown linter
        run: npm install -g markdownlint-cli

      - name: Create markdownlint config
        run: |
          cat > .markdownlint.json << 'EOF'
          {
            "MD013": false,
            "MD033": false,
            "MD041": false
          }
          EOF

      - name: Lint markdown files
        run: markdownlint README.md CHANGELOG.md CONTRIBUTING.md SECURITY.md

      - name: Check for broken links in README
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check.json"

  # Validate examples compile and run
  examples-check:
    name: Examples Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Compile all examples
        run: |
          echo "üîß Compiling all examples..."
          for example in examples/*.rs; do
            example_name=$(basename "$example" .rs)
            echo "Building example: $example_name"
            cargo build --example "$example_name"
          done

      - name: Test examples with timeouts
        run: |
          echo "üß™ Testing examples (with quick timeouts)..."

          # Test basic_tcp example (should timeout quickly)
          timeout 10s cargo run --example basic_tcp || echo "‚úÖ basic_tcp example tested"

          # Test library_usage example (should timeout quickly)
          timeout 10s cargo run --example library_usage || echo "‚úÖ library_usage example tested"

          # Test http_health example (should work with real endpoints)
          timeout 30s cargo run --example http_health || echo "‚úÖ http_health example tested"

      - name: Check example documentation
        run: |
          echo "üìö Checking example documentation..."
          for example in examples/*.rs; do
            echo "Checking documentation in: $example"
            # Check that examples have proper //! documentation
            if ! head -10 "$example" | grep -q "//!"; then
              echo "‚ùå Example $example missing documentation header"
              exit 1
            fi
          done
          echo "‚úÖ All examples have proper documentation"

  # Spell check
  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install codespell
        run: pip install codespell

      - name: Create codespell config
        run: |
          cat > .codespellrc << 'EOF'
          [codespell]
          skip = .git,target,Cargo.lock,*.toml
          ignore-words-list = crate,crates,ser,deser,ba,datas
          EOF

      - name: Run spell check
        run: codespell

  # Check documentation coverage
  docs-coverage:
    name: Documentation Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check documentation coverage
        run: |
          echo "üîç Checking documentation coverage..."
          # Check if rustdoc supports --show-coverage on this nightly
          if cargo +nightly doc --help | grep -q "\-\-show-coverage"; then
            echo "Using --show-coverage flag directly"
            cargo +nightly doc --no-deps --all-features --show-coverage -Z unstable-options
          else
            echo "Using RUSTDOCFLAGS for --show-coverage"
            RUSTDOCFLAGS="-Z unstable-options --show-coverage" cargo +nightly doc --no-deps --all-features
          fi

      - name: Generate documentation coverage report
        run: |
          echo "# Documentation Coverage Report" > docs-coverage.md
          echo "" >> docs-coverage.md
          echo "Generated on $(date)" >> docs-coverage.md
          echo "" >> docs-coverage.md

          # Run with coverage and capture output
          if cargo +nightly doc --help | grep -q "\-\-show-coverage"; then
            cargo +nightly doc --no-deps --all-features --show-coverage -Z unstable-options 2>&1 | tee coverage-output.txt || true
          else
            RUSTDOCFLAGS="-Z unstable-options --show-coverage" cargo +nightly doc --no-deps --all-features 2>&1 | tee coverage-output.txt || true
          fi

          echo "## Coverage Details" >> docs-coverage.md
          echo '```' >> docs-coverage.md
          cat coverage-output.txt >> docs-coverage.md
          echo '```' >> docs-coverage.md

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: docs-coverage-report
          path: docs-coverage.md

  # Deploy documentation to GitHub Pages (optional)
  docs-deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [docs-build, markdown-check, examples-check]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build documentation for GitHub Pages
        run: |
          cargo doc --no-deps --all-features

          # Create index.html redirect
          cat > target/doc/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>waitup documentation</title>
              <meta http-equiv="refresh" content="0; url=waitup/index.html">
          </head>
          <body>
              <p>Redirecting to <a href="waitup/index.html">waitup documentation</a>...</p>
          </body>
          </html>
          EOF

          # Add a .nojekyll file to bypass Jekyll processing
          touch target/doc/.nojekyll

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        with:
          enablement: true
        continue-on-error: true

      - name: Upload to GitHub Pages
        if: steps.pages.outcome == 'success'
        uses: actions/upload-pages-artifact@v4
        with:
          path: target/doc

      - name: Deploy to GitHub Pages
        if: steps.pages.outcome == 'success'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Pages deployment status
        run: |
          if [ "${{ steps.pages.outcome }}" == "success" ]; then
            echo "‚úÖ GitHub Pages deployment successful"
            echo "üìñ Documentation available at: ${{ steps.deployment.outputs.page_url || 'https://grok-rs.github.io/waitup' }}"
          else
            echo "‚ÑπÔ∏è  GitHub Pages not enabled or setup failed"
            echo "üí° To enable documentation hosting:"
            echo "   1. Go to repository Settings ‚Üí Pages"
            echo "   2. Set Source to 'GitHub Actions'"
            echo "   3. Re-run this workflow"
            echo "üìù Documentation artifacts are still available for download"
          fi

  # Comprehensive documentation check
  docs-comprehensive:
    name: Comprehensive Docs Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check README completeness
        run: |
          echo "üìã Checking README completeness..."

          required_sections=(
            "Installation"
            "Usage"
            "Examples"
            "Contributing"
            "License"
          )

          for section in "${required_sections[@]}"; do
            if ! grep -q "## $section" README.md; then
              echo "‚ùå Missing required section: $section"
              exit 1
            fi
          done

          echo "‚úÖ README has all required sections"

      - name: Check CHANGELOG format
        run: |
          echo "üìù Checking CHANGELOG format..."

          # Check for proper changelog format
          if ! grep -q "# Changelog" CHANGELOG.md; then
            echo "‚ùå CHANGELOG.md missing title"
            exit 1
          fi

          if ! grep -q "## \[" CHANGELOG.md; then
            echo "‚ùå CHANGELOG.md missing version entries"
            exit 1
          fi

          echo "‚úÖ CHANGELOG format is correct"

      - name: Validate code examples in README
        run: |
          echo "üîç Checking code examples in README..."

          # For CLI tools, check that README contains usage examples (bash/shell commands)
          # This is more appropriate than requiring Rust code for end-user documentation
          if ! grep -q '```bash' README.md; then
            echo "‚ùå No bash/shell usage examples found in README"
            exit 1
          fi

          # Check that usage examples contain the tool name
          python3 << 'EOF'
          import re

          with open('README.md', 'r') as f:
              content = f.read()

          # Find all bash code blocks
          bash_blocks = re.findall(r'```bash\n(.*?)\n```', content, re.DOTALL)

          if not bash_blocks:
              print("‚ùå No bash code blocks found")
              exit(1)

          # Check if at least some bash blocks contain the tool name
          tool_usage_found = False
          for i, block in enumerate(bash_blocks):
              if 'waitup' in block:
                  tool_usage_found = True
                  print(f"‚úÖ Found tool usage examples in bash block {i+1}")

          if not tool_usage_found:
              print("‚ùå No usage examples found with 'waitup' command")
              exit(1)

          print(f"‚úÖ Found {len(bash_blocks)} bash code blocks with proper usage examples")
          EOF

  # Summary
  docs-summary:
    name: Documentation Summary
    runs-on: ubuntu-latest
    needs:
      [
        docs-build,
        markdown-check,
        examples-check,
        spell-check,
        docs-coverage,
        docs-comprehensive,
        docs-deploy,
      ]
    if: always()
    steps:
      - name: Documentation Report
        run: |
          echo "## üìö Documentation Check Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Build | ${{ needs.docs-build.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Markdown | ${{ needs.markdown-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Examples | ${{ needs.examples-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Spell Check | ${{ needs.spell-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Coverage | ${{ needs.docs-coverage.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Comprehensive | ${{ needs.docs-comprehensive.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Pages Deploy | ${{ needs.docs-deploy.result == 'success' && '‚úÖ Pass' || (needs.docs-deploy.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ö†Ô∏è Failed (non-critical)') }} |"
          echo ""

          # Check critical documentation jobs (Pages deployment is optional)
          if [ "${{ needs.docs-build.result }}" != "success" ] || \
             [ "${{ needs.markdown-check.result }}" != "success" ] || \
             [ "${{ needs.examples-check.result }}" != "success" ] || \
             [ "${{ needs.spell-check.result }}" != "success" ] || \
             [ "${{ needs.docs-coverage.result }}" != "success" ] || \
             [ "${{ needs.docs-comprehensive.result }}" != "success" ]; then
            echo "‚ùå One or more critical documentation checks failed"
            exit 1
          else
            echo "‚úÖ All critical documentation checks passed successfully!"

            # Note about Pages deployment
            if [ "${{ needs.docs-deploy.result }}" != "success" ]; then
              echo "‚ÑπÔ∏è  Pages deployment failed but this is non-critical"
              echo "üí° Enable GitHub Pages in repository settings to host documentation"
            fi
          fi
