name: Security

# Security workflow that complements the pre-commit security hooks
# This workflow provides comprehensive security analysis including:
# - cargo-audit: vulnerability scanning (matches pre-commit cargo-audit hook)
# - cargo-deny: license and dependency policy enforcement (matches pre-commit cargo-deny hook)
# - Comprehensive reporting with SARIF uploads for GitHub Security tab
# - Supply chain security validation with detailed reporting

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: "0 2 * * *"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  security-events: write

jobs:
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run comprehensive cargo audit
        run: |
          echo "üîç Running comprehensive security audit..."

          # First, run basic audit and capture results
          echo "Running cargo audit with JSON output..."
          if cargo audit --json > audit-results.json 2>&1; then
            echo "‚úÖ Basic audit completed successfully"
          else
            echo "‚ö†Ô∏è Basic audit had issues, but continuing..."
          fi

          # Verify JSON file was created
          if [ -f "audit-results.json" ]; then
            echo "‚úÖ audit-results.json created successfully"
            echo "File size: $(wc -c < audit-results.json) bytes"
          else
            echo "‚ö†Ô∏è audit-results.json not found, creating minimal structure..."
            echo '{"database":{"advisory-count":0},"lockfile":{"dependency-count":0},"vulnerabilities":{"found":false,"count":0,"list":[]},"warnings":{}}' > audit-results.json
          fi

          # Run strict audit check (but don't fail the workflow if it fails)
          echo "üîç Running strict audit check..."
          if cargo audit --deny warnings; then
            echo "‚úÖ Strict audit check passed"
          else
            audit_exit_code=$?
            echo "‚ö†Ô∏è Strict audit check failed with exit code: $audit_exit_code"
            echo "This will be handled in the final check step"
          fi

      - name: Generate SARIF from audit
        run: |
          cat > convert-audit.py << 'EOF'
          import json
          import sys
          import os

          def convert_to_sarif(audit_data):
              sarif = {
                  "version": "2.1.0",
                  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                  "runs": [{
                      "tool": {
                          "driver": {
                              "name": "cargo-audit",
                              "version": "0.18.0",
                              "informationUri": "https://github.com/RustSec/rustsec"
                          }
                      },
                      "results": []
                  }]
              }

              # Check if vulnerabilities exist and are found
              if ("vulnerabilities" in audit_data and
                  audit_data["vulnerabilities"].get("found", False) and
                  audit_data["vulnerabilities"].get("list", [])):

                  for vuln in audit_data["vulnerabilities"]["list"]:
                      advisory = vuln.get("advisory", {})
                      package = vuln.get("package", {})

                      result = {
                          "ruleId": advisory.get("id", "unknown"),
                          "level": "warning" if advisory.get("severity") == "low" else "error",
                          "message": {
                              "text": advisory.get("title", "Security vulnerability detected")
                          },
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {
                                      "uri": "Cargo.lock"
                                  }
                              }
                          }],
                          "properties": {
                              "package": package.get("name", "unknown"),
                              "version": package.get("version", "unknown"),
                              "advisory_url": advisory.get("url", ""),
                              "severity": advisory.get("severity", "unknown")
                          }
                      }
                      sarif["runs"][0]["results"].append(result)

              return sarif

          if __name__ == "__main__":
              try:
                  # Check if audit results file exists
                  if not os.path.exists("audit-results.json"):
                      print("audit-results.json not found, creating empty SARIF file")
                      audit_data = {"vulnerabilities": {"found": False, "list": []}}
                  else:
                      with open("audit-results.json", "r") as f:
                          audit_data = json.load(f)

                  sarif_data = convert_to_sarif(audit_data)

                  with open("security-audit.sarif", "w") as f:
                      json.dump(sarif_data, f, indent=2)

                  vuln_count = len(sarif_data["runs"][0]["results"])
                  if vuln_count > 0:
                      print(f"SARIF file generated successfully with {vuln_count} vulnerabilities")
                  else:
                      print("SARIF file generated successfully - no vulnerabilities found")

              except Exception as e:
                  print(f"Error converting audit results: {e}")
                  # Create empty SARIF file as fallback
                  empty_sarif = {
                      "version": "2.1.0",
                      "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
                      "runs": [{
                          "tool": {
                              "driver": {
                                  "name": "cargo-audit",
                                  "version": "0.18.0",
                                  "informationUri": "https://github.com/RustSec/rustsec"
                              }
                          },
                          "results": []
                      }]
                  }
                  with open("security-audit.sarif", "w") as f:
                      json.dump(empty_sarif, f, indent=2)
                  print("Created empty SARIF file due to error")
          EOF

          python3 convert-audit.py

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: security-audit.sarif
          category: cargo-audit
        if: always()
        continue-on-error: true

      - name: Final vulnerability check
        run: |
          echo "üîê Final security vulnerability assessment..."

          # Check if we have SARIF results to analyze
          if [ -f "security-audit.sarif" ]; then
            vuln_count=$(python3 -c "import json; sarif=json.load(open('security-audit.sarif')); print(len(sarif['runs'][0]['results']))")
            echo "SARIF file contains $vuln_count vulnerabilities"
          fi

          # Run final audit check
          echo "Running final cargo audit check..."
          if cargo audit --quiet; then
            echo "‚úÖ Basic vulnerability scan passed"
          else
            basic_exit_code=$?
            echo "‚ùå Basic vulnerability scan failed (exit code: $basic_exit_code)"
          fi

          # Run strict check
          if cargo audit --deny warnings --quiet; then
            echo "‚úÖ Strict vulnerability check passed - all dependencies are secure"
          else
            strict_exit_code=$?
            echo "‚ö†Ô∏è Strict audit check failed (exit code: $strict_exit_code)"

            # Show detailed results for analysis
            echo ""
            echo "=== Detailed audit results ==="
            cargo audit || true
            echo ""
            echo "=== Checking for specific warning types ==="

            # Check different warning categories
            for warn_type in unmaintained unsound yanked; do
              echo "Checking for $warn_type packages..."
              if ! cargo audit --deny $warn_type --quiet 2>/dev/null; then
                echo "‚ö†Ô∏è Found $warn_type packages"
              fi
            done

            echo ""
            echo "‚ùå Security audit detected issues!"
            echo "Please check the uploaded SARIF file and security tab for detailed information."
            echo "Run 'cargo audit' locally for immediate details."
            exit 1
          fi

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Check licenses
        run: |
          echo "üìÑ Checking dependency licenses..."
          cargo license --json > licenses.json

          # Check for incompatible licenses
          python3 << 'EOF'
          import json

          # Allowed licenses for MIT-licensed project (must match deny.toml)
          allowed_licenses = {
              "MIT", "Apache-2.0", "Apache-2.0 WITH LLVM-exception",
              "BSD-3-Clause", "ISC", "Unicode-3.0", "Unlicense", "CDLA-Permissive-2.0"
          }

          incompatible_licenses = set()

          with open("licenses.json", "r") as f:
              licenses = json.load(f)

          for package in licenses:
              license_name = package.get("license")
              if license_name:
                  # Handle complex license expressions (OR and AND)
                  # For OR expressions, at least one license must be allowed
                  # For AND expressions, all licenses must be allowed
                  is_compatible = False

                  if " AND " in license_name and " OR " in license_name:
                      # Complex expression with both AND and OR - parse carefully
                      # For now, treat as potentially incompatible and flag for manual review
                      print(f"‚ö†Ô∏è  {package['name']} uses complex license expression: {license_name}")
                      print(f"    Please manually verify compatibility")
                  elif " OR " in license_name:
                      # OR expression - any allowed license makes it compatible
                      license_parts = [l.strip().strip("()") for l in license_name.split(" OR ")]
                      is_compatible = any(part in allowed_licenses for part in license_parts)
                  elif " AND " in license_name:
                      # AND expression - all licenses must be allowed
                      license_parts = [l.strip().strip("()") for l in license_name.split(" AND ")]
                      is_compatible = all(part in allowed_licenses for part in license_parts)
                  else:
                      # Simple license name
                      is_compatible = license_name in allowed_licenses

                  if not is_compatible and " AND " not in license_name:
                      incompatible_licenses.add(license_name)
                      print(f"‚ö†Ô∏è  {package['name']} uses potentially incompatible license: {license_name}")

          if incompatible_licenses:
              print(f"\n‚ùå Found {len(incompatible_licenses)} potentially incompatible license(s)")
              print("Please review these licenses for compatibility with MIT license")
              exit(1)
          else:
              print("‚úÖ All licenses are compatible")
          EOF

      - name: Generate license report
        run: |
          echo "# License Report" > license-report.md
          echo "" >> license-report.md
          echo "Generated on $(date)" >> license-report.md
          echo "" >> license-report.md
          echo "## Direct Dependencies" >> license-report.md
          echo "" >> license-report.md

          cargo license --authors --do-not-bundle | while IFS= read -r line; do
            echo "$line" >> license-report.md
          done

      - name: Upload license report
        uses: actions/upload-artifact@v5
        with:
          name: license-report
          path: license-report.md

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Verify deny.toml configuration exists
        run: |
          echo "üîç Using existing deny.toml configuration..."
          if [ -f "deny.toml" ]; then
            echo "‚úÖ deny.toml found - using project's supply chain security configuration"
            echo "üìã Configuration summary:"
            echo "   - License policy enforcement"
            echo "   - Vulnerability scanning"
            echo "   - Dependency banning rules"
            echo "   - Source validation"
          else
            echo "‚ùå deny.toml not found!"
            exit 1
          fi

      - name: Run cargo deny check
        run: |
          echo "üîç Running cargo-deny security checks..."
          cargo deny check

      - name: Generate deny report
        run: |
          echo "üìä Generating detailed cargo-deny report..."
          cargo deny check --format json > deny-report.json 2>/dev/null || true
          cargo deny list > deny-licenses.txt 2>/dev/null || true

      - name: Upload deny report
        uses: actions/upload-artifact@v5
        with:
          name: cargo-deny-report
          path: |
            deny-report.json
            deny-licenses.txt
        if: always()

      - name: Check for yanked crates
        run: |
          echo "üîç Checking for yanked crates..."
          if cargo install --list | grep -q "cargo-outdated"; then
            echo "cargo-outdated already installed"
          else
            cargo install cargo-outdated
          fi

          # Check for outdated dependencies
          cargo outdated --exit-code 1 || echo "Some dependencies are outdated"

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Fetch full history for secret scanning
          fetch-depth: 0

      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Aggregate security results
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [audit, license-check, supply-chain, secrets-scan]
    if: always()
    steps:
      - name: Security Report
        run: |
          echo "## üõ°Ô∏è Security Scan Summary"
          echo ""
          echo "| Check | Status |"
          echo "|-------|--------|"
          echo "| Vulnerability Audit | ${{ needs.audit.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| License Check | ${{ needs.license-check.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Supply Chain | ${{ needs.supply-chain.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |"
          echo ""

          if [ "${{ needs.audit.result }}" != "success" ] || \
             [ "${{ needs.license-check.result }}" != "success" ] || \
             [ "${{ needs.supply-chain.result }}" != "success" ] || \
             [ "${{ needs.secrets-scan.result }}" != "success" ]; then
            echo "‚ùå One or more security checks failed. Please review the results."
            exit 1
          else
            echo "‚úÖ All security checks passed successfully!"
          fi
