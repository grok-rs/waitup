name: CI

# CI workflow that mirrors the strict pre-commit hooks configuration
# This ensures consistency between local development and CI environment
# Hooks alignment:
# - Formatting: cargo fmt (matches .pre-commit-config.yaml fmt hook)
# - Linting: strict clippy with pedantic/nursery (matches pre-commit clippy args)
# - Testing: comprehensive test suite (matches lefthook pre-commit/pre-push)
# - Security: cargo audit + cargo deny (matches pre-commit security hooks)
# - Documentation: doc builds and tests (matches pre-commit doc-check)

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run CI daily at 6 AM UTC to catch dependency issues
    - cron: "0 6 * * *"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          # Test MSRV (Minimum Supported Rust Version)
          - os: ubuntu-latest
            rust: 1.75.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}

      - name: Check build
        run: cargo check --all-targets --all-features

      - name: Run unit tests
        run: cargo test --lib --all-features

      - name: Run integration tests
        run: cargo test --test integration_tests

      - name: Run doc tests
        run: cargo test --doc

      - name: Test examples compile
        run: |
          cargo check --examples
          cargo build --examples

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run strict clippy linting
        run: |
          cargo clippy --all-targets --all-features -- \
            -D warnings \
            -D clippy::pedantic \
            -D clippy::nursery \
            -D clippy::unwrap_used \
            -D clippy::expect_used \
            -D clippy::panic \
            -D clippy::todo \
            -D clippy::unimplemented \
            -W clippy::dbg_macro \
            -W clippy::print_stdout \
            -W clippy::print_stderr \
            -W clippy::string_slice \
            -W clippy::clone_on_ref_ptr \
            -W clippy::rc_buffer \
            -W clippy::rc_mutex

      - name: Check for unused dependencies
        run: |
          cargo install cargo-machete
          cargo machete

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check for known security vulnerabilities
        run: cargo audit --deny warnings

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check documentation
        run: cargo doc --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

      - name: Test documentation examples
        run: cargo test --doc --all-features

  minimal-versions:
    name: Minimal Dependency Versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-hack
        run: cargo install cargo-hack

      - name: Check minimal versions
        run: cargo hack check --feature-powerset

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: cross-${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cross compile
        run: cross build --target ${{ matrix.target }} --release

  test-binaries:
    name: Test Built Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy, rust-docs, rust-src

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Test binary help output
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ./target/${{ matrix.target }}/release/waitup.exe --help
          else
            ./target/${{ matrix.target }}/release/waitup --help
          fi
        shell: bash

      - name: Test binary version output
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ./target/${{ matrix.target }}/release/waitup.exe --version
          else
            ./target/${{ matrix.target }}/release/waitup --version
          fi
        shell: bash

      - name: Test shell completion generation
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ./target/${{ matrix.target }}/release/waitup.exe --generate-completion bash > completions.bash
          else
            ./target/${{ matrix.target }}/release/waitup --generate-completion bash > completions.bash
          fi
          test -s completions.bash
        shell: bash

  # Job to check if all required checks pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs:
      [
        test,
        lint,
        coverage,
        security,
        docs,
        minimal-versions,
        cross-compile,
        test-binaries,
      ]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.coverage.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.docs.result }}" != "success" ] || \
             [ "${{ needs.minimal-versions.result }}" != "success" ] || \
             [ "${{ needs.cross-compile.result }}" != "success" ] || \
             [ "${{ needs.test-binaries.result }}" != "success" ]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully"
